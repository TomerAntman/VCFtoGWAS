},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
qq_plot <- as.ggplot(function()  qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
qq_plot <- as.ggplot(function()  qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
qq_plot()
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("GWAS_mat")) rm(GWAS_mat)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>gData</b> is saved")
step2.1_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.1 results")
#* check if you entered the directory correctly:
#* the file names of results from step 2.1 should appear in the output
t(t(list.files(step2.1_results_directory)))
GWAS_trial_name
GWAS_trial_name = "U"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
GWAS_trial[1:10,1:10]
qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"]))
qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
as.ggplot(qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
q = qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"]))
q = qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
qqunif
gap::qqunif
install.packages("gap")
gap::qqunif(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
gq = gap::qqunif(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
gq
as.ggplot(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
plot(1:10)
p <- recordPlot()
plot.new() ## clean up device
p # redraw
as.ggplot(p)
p1 = as.grob(p)
p1 = as.grob(plot(1:10))
p1 = as.grob(function() plot(1:10))
p1
as.ggplot(p1)
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
plot(1:10)
1
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
p1 = as.grob(function() plot(1:20))
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
knitr::opts_chunk$set(echo = TRUE)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
knitr::opts_chunk$set(echo = TRUE)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
library(ggplot2)
data(iris)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
library(ggplot2)
data(iris)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)
},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
library(statgenGWAS)
plot(GWAS, trial="U",trait="fit")
plot(GWAS, trial="Y",trait="fit")
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
interesting_results[["U"]] = c("fit", "binfit")
interesting_results[["Y"]] = c("fit", "binfit")
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
memory.limit()
memory.limit(size = 99999)
memory.limit(size = 9999)
memory.limit(size = 999)
memory.limit(size = 4000)
memory.limit(size = 4001)
memory.limit(size = 4100)
memory.limit(size = 4010)
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
memory.size()
file.edit(file.path("~", ".Rprofile"))
file.edit(file.path("~", ".Rprofile"))
sessionInfo()
gc()
knitr::opts_chunk$set(echo = TRUE)
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)
},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
interesting_results[["U"]] = c("fit", "binfit")
interesting_results[["Y"]] = c("fit", "binfit")
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
suppressWarnings(print(alleleVSfitness))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData, GWAS, GWAS_trial_name, checked_trait, haplo_sufficency = TRUE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
print(head(effect_details))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData, GWAS, GWAS_trial_name, checked_trait, haplo_sufficency = FALSE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
print(head(effect_details))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData, GWAS, GWAS_trial_name, checked_trait, haplo_sufficency = FALSE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
# print(head(effect_details))
}
}
interesting_results
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
interesting_results[["U"]] = c("fit", "binfit")
# interesting_results[["Y"]] = c("fit", "binfit")
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData,
GWAS,
GWAS_trial_name,
checked_trait,
haplo_sufficency = FALSE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
# print(head(effect_details))
}
}
effect_plot + scale_x_log10()
log10(-3)
effect_details
ggplot(effect_details, aes(x = log10(abs(poly_score)+1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "SNP effect score",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log10((-1*poly_score)+1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log10(-(SNP effect score))",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log10((-1*poly_score)+1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log10[-(SNP effect score)]",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log2((-1*poly_score)+1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log2[-(SNP effect score)]",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log2((-1*poly_score)+0.2),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log2[-(SNP effect score)]",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log2((-1*poly_score)+0.1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log2[-(SNP effect score)]",
y = "binfit",
color = "binfit")
ggplot(effect_details, aes(x = log2((-1*poly_score)+1),
y = as.factor(trait),
color = as.factor(trait))) +
geom_violin() +
geom_jitter(aes(color = as.factor(trait)),width=0.15, alpha=0.5) +
# scale_x_continuous(breaks = round(seq(min(df$poly_score), max(df$poly_score), by = 0.5),1)) +
theme_bw() +
labs(title = "Polygenic Effect Score",
# subtitle = "Categorical fitness on Glycerol",
subtitle = paste0("Trial: ", "U","; Trait: ","binfit"),
x = "Log2[-(SNP effect score)]",
y = "binfit",
color = "binfit")
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData,
GWAS,
GWAS_trial_name,
checked_trait,
haplo_sufficency = FALSE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
# print(head(effect_details))
}
}
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
pol_effect <- polygenic_effect_score(gData,
GWAS,
GWAS_trial_name,
checked_trait,
haplo_sufficency = FALSE)
effect_details <- pol_effect$effect_scores
effect_plot <- pol_effect$effect_plot
print(effect_plot)
# print(head(effect_details))
}
}
pkgdown::build_site()
pkgdown::build_site()
