library(VCFtoGWAS)
#polygenic_effect_score(gData,
#GWAS,
#GWAS_trial_name,
#checked_trait,
# haplo_sufficency = TRUE)
?Expand_files
usethis::use_news_md(open = FALSE)
usethis::use_vignette("package_intro")
devtools::document()
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(pkg="VCFtoGWAS")
library(VCFtoGWAS)
library(VCFtoGWAS)
library(VCFtoGWAS)
pkgdown::build_site(pkg="VCFtoGWAS")
pkgdown::build_site()
devtools::install_github("r-lib/pkgdown")
library(VCFtoGWAS)
pkgdown::build_site()
usethis::use_pkgdown()
usethis::create_package("VCFtoGWAS")
?Build_offspring_GWAS_matrix
?Create_complete_snp_data
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
library(VCFtoGWAS)
library(VCFtoGWAS)
pkgdown::build_site()
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
library(VCFtoGWAS)
pkgdown::build_site()
show_suggested_data_structure()
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
show_suggested_data_structure()
show_suggested_data_structure()[0]
d1 <- "Results"
d2 <- paste0(d1, "/Chapter1-VCF2GWAS")
d3 <- paste0(d2, "/Step1.1-Upload_VCF")
d4 <- paste0(d3, "/Step1.2-Filter_genotypes")
d5 <- paste0(d4, "/Step1.3-Expand")
d6 <- paste0(d5, "/Step1.4-GWAS_Matrix")
path <- c(
d1,
d2,
d3,
paste0(d3, list("/fix_sub.RDS","/gt_GTonly.RDS")),
d4,
paste0(d4, list("/fix_filt.RDS","/gt_GTonly_filt.RDS")),
d5,
paste0(d5, list("/fix_filt_expand.RDS","/indication.RDS","/gt_GTonly_filt_expand.RDS")),
d6,
paste0(d6, list("/mapping_info.RDS","/GWAS_mat.RDS","/phenotypes.csv","/offspring_GWAS_mat.RDS","/offspring_phenotypes.csv")),
"Results/Chapter2-Analysis",
"Results/Chapter2-Analysis/Step2.1-Create_gData",
"Results/Chapter2-Analysis/Step2.1-Create_gData/gData.RDS",
"Results/Chapter2-Analysis/Step2.1-Create_gData/Step2.2-Single_Trait_GWAS",
"Results/Chapter2-Analysis/Step2.1-Create_gData/Step2.2-Single_Trait_GWAS/GWAS_Result.RDS",
"Results/Chapter2-Analysis/Step2.1-Create_gData/Step2.2-Single_Trait_GWAS/Significant_SNPs_information.csv",
"Results/Chapter2-Analysis/Step2.1-Create_gData/Step2.2-Single_Trait_GWAS/complete_results_plots.pdf"
# "Results/Chapter3-Conclusions",
# "Results/Chapter3-Conclusions/Step3.1-Visualizations",
# "Results/Chapter3-Conclusions/Step3.1-Visualizations/Results1.pdf"
)
x = data.tree::as.Node(data.frame(pathString = path))
x
x1
x$attributesAll
x$attributes
x
x[0]
x$levelName
x["Results"]
x
x$`Chapter1-VCF2GWAS`
x
x$.__enclos_env__
x$root
x$root$count
x$root$totalCount
x$root$level
x$root$levelName
x[1]
x[[1]]
x$AddChild()
x$isRoot
?rmarkdown::html_vignette
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
pkgdown::build_site
pkgdown::build_site_external
library(VCFtoGWAS)
show_suggested_data_structure()
library(VCFtoGWAS)
pkgdown::build_site()
pkgdown::build_site()
library(VCFtoGWAS)
pkgdown::build_site()
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)
},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
qq_plot <- as.ggplot(function()  qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
qq_plot <- as.ggplot(function()  qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
qq_plot()
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("GWAS_mat")) rm(GWAS_mat)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>gData</b> is saved")
step2.1_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.1 results")
#* check if you entered the directory correctly:
#* the file names of results from step 2.1 should appear in the output
t(t(list.files(step2.1_results_directory)))
GWAS_trial_name
GWAS_trial_name = "U"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
GWAS_trial[1:10,1:10]
qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"]))
qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
as.ggplot(qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
q = qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"]))
q = qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
qqunif
gap::qqunif
install.packages("gap")
gap::qqunif(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
gq = gap::qqunif(GWAS_trial$pValue[GWAS_trial$trait=="fit"])
gq
as.ggplot(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait=="fit"])) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
plot(1:10)
p <- recordPlot()
plot.new() ## clean up device
p # redraw
as.ggplot(p)
p1 = as.grob(p)
p1 = as.grob(plot(1:10))
p1 = as.grob(function() plot(1:10))
p1
as.ggplot(p1)
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
plot(1:10)
1
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
plot(1:10)
p1 = as.grob(function() plot(1:20))
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
knitr::opts_chunk$set(echo = TRUE)
p1 = ggplotify::as.grob(function() plot(1:20))
ggplotify::as.ggplot(p1)
knitr::opts_chunk$set(echo = TRUE)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
library(ggplot2)
data(iris)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
library(ggplot2)
data(iris)
ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_point()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
if(!require("rstudioapi")) {install.packages("rstudioapi")}
if(!require("VCFtoGWAS")){
if(!require("devtools")){install.packages("devtools")}
# load package:
tryCatch({
rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
devtools::load_all(Path_of_project)
},
error = {
devtools::install_github("TomerAntman/VCFtoGWAS")
})
}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
library(statgenGWAS)
plot(GWAS, trial="U",trait="fit")
plot(GWAS, trial="Y",trait="fit")
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
interesting_results[["U"]] = c("fit", "binfit")
interesting_results[["Y"]] = c("fit", "binfit")
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
memory.limit()
memory.limit(size = 99999)
memory.limit(size = 9999)
memory.limit(size = 999)
memory.limit(size = 4000)
memory.limit(size = 4001)
memory.limit(size = 4100)
memory.limit(size = 4010)
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
memory.size()
file.edit(file.path("~", ".Rprofile"))
file.edit(file.path("~", ".Rprofile"))
sessionInfo()
gc()
