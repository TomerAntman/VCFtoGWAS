}
library("VCFtoGWAS")
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj = as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
gc()
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
grob_obj <- as.grob(function() qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait]))
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
seq(1,10,2)
seq(1,10,2)
seq(1,10,5)
a <- 1:120
a[ c( rep(FALSE, 5), TRUE ) ]
a[ c( rep(TRUE, 5), FALSE ) ]
a[ c( rep(TRUE, 4), FALSE ) ]
a[ c( rep(TRUE, 3), FALSE ) ]
GWAS_trial$pValue[GWAS_trial$trait==checked_trait]
GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 5), FALSE ) ]
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 5), FALSE ) ])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 4), FALSE ) ])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 3), FALSE ) ])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 1), FALSE ) ])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 2), FALSE ) ])
length(GWAS_trial$pValue[GWAS_trial$trait==checked_trait][ c( rep(TRUE, 3), FALSE ) ])
a = GWAS_trial$pValue[GWAS_trial$trait==checked_trait]
a[1:(length(a)/2)]
a[1:(length(a)/2)][c(F,T)]
a[1:(length(a)/2)][c(F,F,T)]
a[1:(length(a)/2)][c(F,F,F,T)]
do_qq <- function(GWAS_trial, checked_trait){
pvals <- GWAS_trial$pValue[GWAS_trial$trait==checked_trait]
grob_obj <- as.grob(function() qqman::qq(
c(pvals[1:(length(pvals/2))][c(rep(T,4), F)],pvals[(length(pvals/2)+1):length(pvals)])
)
)
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
do_qq(GWAS_trial, checked_trait)
do_qq(GWAS_trial, checked_trait)
do_qq(GWAS_trial, checked_trait)
checked_trait = "fit"
GWAS_trial_name = "U"
checked_trait = "fit"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
do_qq(GWAS_trial, checked_trait)
checked_trait = "binfit"
GWAS_trial_name = "U"
checked_trait = "binfit"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
do_qq(GWAS_trial, checked_trait)
library(grid)
grid.newpage()
GWAS_trial_name = "U"
checked_trait = "binfit"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
qq_plot <- do_qq(GWAS_trial, checked_trait)
grid.draw(qq_plot)
plot(1:10)
plot(1:10)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(1:10)
```{r pressure, echo=FALSE}
plot(pressure)
plot(1:10)
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
pvals <- GWAS_trial$pValue[GWAS_trial$trait==checked_trait]
grob_obj <- as.grob(function() qqman::qq(
# show less points to make the plot less heavy to run
c(pvals[1:(length(pvals/2))][c(rep(T,4), F)],pvals[(length(pvals/2)+1):length(pvals)])
)
)
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)
if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
options(bitmapType = "cairo")
}
do_qq <- function(GWAS_trial, checked_trait){
pvals <- GWAS_trial$pValue[GWAS_trial$trait==checked_trait]
grob_obj <- as.grob(function() qqman::qq(
# show less points to make the plot less heavy to run
c(pvals[1:(length(pvals/2))][c(rep(T,4), F)],pvals[(length(pvals/2)+1):length(pvals)])
)
)
qq_plot <- as.ggplot(grob_obj) +
labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
return(qq_plot)
}
for (GWAS_trial_name in names(GWAS$GWAResult)){
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
for (checked_trait in unique(GWAS_trial$trait)){
suppressWarnings({
qq_plot <- do_qq(GWAS_trial, checked_trait)
print(qq_plot)})
}
}
GWAS_trial_name = "Y"
checked_trait = "binfit"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
qq_plot <- do_qq(GWAS_trial, checked_trait)
qq_plot
GWAS_trial_name = "Y"
checked_trait = "fit"
GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
qq_plot <- do_qq(GWAS_trial, checked_trait)
qq_plot
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
#interesting_results[["U"]] = c("fit", "binfit")
interesting_results[["Y"]] = c("fit", "binfit")
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
0.75*1.2
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
bquote(log[2]-('SNP effect score')+1)
bquote(log[2]-(`SNP effect score`)+1)
bquote(log[2]-(SNP effect score)+1)
bquote(log[2]-(`SNP effect score`)+1)
bquote(log[2]-(expression(SNP effect score))+1)
bquote(log[2]-(expression('SNP effect score'))+1)
bquote(log[2](-a)
)
bquote(log[2]"-"~.(`SNP effect score`)+1)
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
suppressWarnings(print(alleleVSfitness))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
if(!require("hash")) install.packages("hash")
library(hash)
interesting_results <- hash()
##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)
interesting_results[["U"]] = c("fit", "binfit")
#interesting_results[["Y"]] = c("fit", "binfit")
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
GWAS$signSnp
GWAS$signSnp$U[GWAS$signSnp$U$trait=="fit",:]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit")[c(F,T)],]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit")[c(F,T)],]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit")[c(T,F)],]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),][c(F,T),]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),][c(F,F,T),]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),][c(rep(F,1),T),]
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),]
View(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),])
plot(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"],GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"effect"])
GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"]
array(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"])
asarray(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"])
as.vector(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"])
as.array(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"])
plot(as.vector(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"]),as.vector(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"effect"]))
typeof(as.vector(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"]))
unlist(as.vector(GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"]))
unlist((GWAS$signSnp$U[(GWAS$signSnp$U$trait=="fit"),"pos"]))
unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")]))
plot(unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")])), unlist((GWAS$signSnp$U$effect[(GWAS$signSnp$U$trait=="fit")]))
)
plot(unlist((GWAS$signSnp$U$effect[(GWAS$signSnp$U$trait=="fit")])),unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")])))
hist(unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")])))
hist(unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")])), breaks = 1000)
hist(unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")])), breaks = 500)
positions = unlist((GWAS$signSnp$U$pos[(GWAS$signSnp$U$trait=="fit")]))
round(positions/10,4)*100
hist(round(positions/10,4)*100,breaks=500)
hist(round(positions/10,2)*10,breaks=500)
#* remove uneccesary big files:
if (exists("results2")) rm(results2)
rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")
step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")
t(t(list.files(step2.2_results_directory)))
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")
GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
df<-c(12,3,4,56,78,18,NA,46,78,100,NA)
quantile(df, na.rm=T)
quantile(df,probs=75, na.rm=T)
quantile(df,probs=0.75, na.rm=T)
quantile(df,probs=0.75, na.rm=T)[0]
quantile(df,probs=0.75, na.rm=T)[2]
quantile(df,probs=0.75, na.rm=T)[1]
as.vector(quantile(df,probs=0.75, na.rm=T))
as.vector(quantile(df,probs=0.7, na.rm=T))
library(VCFtoGWAS)
knitr::opts_chunk$set(echo = TRUE)
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
suppressWarnings(print(manhat_plot))
}
}
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
suppressWarnings(print(alleleVSfitness))
}
}
for (GWAS_trial_name in names(interesting_results)){
for (checked_trait in interesting_results[[GWAS_trial_name]]){
alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
suppressWarnings(print(alleleVSfitness))
}
}
checked_trait
if(!require("data.table")) install.packages("data.table")
library(data.table)
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
bin =   grepl("bin",checked_trait)
eval(parse(text = paste0(
"sigsnp <- GWAS$signSnp$",GWAS_trial_name,"$snp[GWAS$signSnp$",GWAS_trial_name,"$trait=='",checked_trait,"']"
)))
markers <- gData$markers[,colnames(gData$markers) %in% sigsnp]
phenos <- gData$pheno[[GWAS_trial_name]]
temp_df <- as.data.frame(matrix(nrow = nrow(markers), ncol = 2))
colnames(temp_df) <- c("genotype",checked_trait)
rownames(temp_df) <- rownames(markers)
strains <- phenos["genotype"][[1]]
temp_df[strains,] <- phenos[, c("genotype",checked_trait)]
df_hist <- cbind(temp_df,markers)
molten.data <- melt(as.data.table(df_hist), id = c("genotype",checked_trait))
colnames(molten.data)[c(2,4)]<- c("trait","allele_presence")
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
molten.data <- molten.data %>%
mutate(allele = recode(allele_presence,
`0` = '0/0',
`1` = '1/0',
`2` = '1/1')) %>%
mutate(allele = as.factor(allele))
colnames(molten.data)[2]<- "trait"
# create colors (because there is some kind of issue)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
molten.data$count <- NA
for (var in unique(molten.data$variable)){
for (trait in unique(molten.data$trait)){
for (allele in c(0,1,2)){
relevant_rows <- (molten.data$variable == var & molten.data$trait == trait & molten.data$allele_presence == allele)
molten.data$count[relevant_rows] <- length(which(relevant_rows))
}
}}
color_hues <- gg_color_hue(length(unique(molten.data$trait)))
ggplot(molten.data, aes(x = as.factor(trait),
y = allele,
colour = as.factor(allele_presence),
size = count), alpha = 0.8) +
geom_point() +
geom_text(aes(label = count),
colour = "black",
size = 3) +
theme_bw() +
scale_size_continuous(range = c(5, 20)) +
theme(
panel.background = element_blank()) +
facet_wrap(~variable) +
labs(title= "SNP Allele Presence in correlation to fitness",
subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait)) +
xlab(checked_trait) +
ylab("SNP allele presence") +
guides(color = 'none', size = 'none')
View(molten.data)
View(df_hist)
sigsnp
len(sigsnp)
length(sigsnp)
View(markers)
temp_df
df_hist = merge(temp_df,markers, by=0, all=TRUE)
View(df_hist)
markers <- gData$markers[,colnames(gData$markers) %in% sigsnp]
phenos <- gData$pheno[[GWAS_trial_name]]
temp_df <- as.data.frame(matrix(nrow = nrow(markers), ncol = 1))
colnames(temp_df) <- c(checked_trait)
rownames(temp_df) <- phenos["genotype"][[1]]
temp_df[,1] <- phenos[,checked_trait]
head(temp_df)
df_hist = merge(temp_df,markers, by=0, all=TRUE)
View(df_hist)
df_hist <- merge(temp_df,markers, by=0, all=TRUE)
colnames(df_hist)[1] <- "genotype"
molten.data <- melt(as.data.table(df_hist), id = c("genotype",checked_trait))
colnames(molten.data)[c(2,4)]<- c("trait","allele_presence")
View(molten.data)
molten.data <- molten.data %>%
mutate(allele = recode(allele_presence,
`0` = '0/0',
`1` = '1/0',
`2` = '1/1')) %>%
mutate(allele = as.factor(allele))
colnames(molten.data)[2]<- "trait"
# create colors (because there is some kind of issue)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
View(molten.data)
molten.data$count <- NA
for (var in unique(molten.data$variable)){
for (trait in unique(molten.data$trait)){
for (allele in c(0,1,2)){
relevant_rows <- (molten.data$variable == var & molten.data$trait == trait & molten.data$allele_presence == allele)
molten.data$count[relevant_rows] <- length(which(relevant_rows)) # each row has information (count column about the number of times it appears)
}
}
}
GWAS_trial_name = "Y"
checked_trait = "fit"
bin =   grepl("bin",checked_trait)
eval(parse(text = paste0(
"sigsnp <- GWAS$signSnp$",GWAS_trial_name,"$snp[GWAS$signSnp$",GWAS_trial_name,"$trait=='",checked_trait,"']"
)))
length(sigsnp)
sigsnp
checked_trait = "binfit"
bin =   grepl("bin",checked_trait)
eval(parse(text = paste0(
"sigsnp <- GWAS$signSnp$",GWAS_trial_name,"$snp[GWAS$signSnp$",GWAS_trial_name,"$trait=='",checked_trait,"']"
)))
length(sigsnp)
pkgdown::build_site()
pkgdown::build_site()
gc()
gc()
library(VCFtoGWAS)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
