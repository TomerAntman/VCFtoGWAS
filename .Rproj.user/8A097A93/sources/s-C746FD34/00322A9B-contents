---
title: "Using VCFtoGWAS package - Chapter 2 - Step 2"
author: "Tomer Antman"
date: "12/26/2021"
output: html_document
---

This markdown file assumes you already ran all the markdowns in chapter 1 and you now have a gData object saved from ["Step 2.1"](./step 2.1 - create gData.Rmd) markdown file.

In this step, the "single trait GWAS" will be executed based on the gData object from the previous step.

In general, in this chapter, we will execute the GWAS (using [statgenGWAS package](https://cran.r-project.org/web/packages/statgenGWAS/vignettes/GWAS.html))

Please don't skip any code chunks.

# Step 0: Load prebuilt package ----


```{r load library}
if(!require("rstudioapi")) {install.packages("rstudioapi")}

if(!require("VCFtoGWAS")){
  if(!require("devtools")){install.packages("devtools")}
# load package:
  tryCatch({
    rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
  Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
  devtools::load_all(Path_of_project)},
           error = {
             devtools::install_github("TomerAntman/VCFtoGWAS")
             })
}

library("VCFtoGWAS")
```

## Load results of previous steps:

Set the results_directory where you saved the files from step 1 from chapter 2 (Step2.2):

IMPORTANT: notice that in R, you must separate folders with forward slash (/) and not backslash(\)
```{r set the directory of the gData object location}
#* remove uneccesary big files:
if (exists("GWAS_mat")) rm(GWAS_mat)

rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>gData</b> is saved")

step2.1_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.1 results")


#* check if you entered the directory correctly:
#* the file names of results from step 2.1 should appear in the output
t(t(list.files(step2.1_results_directory)))
```


```{r load the files (for use or for view)}

mapping_info <- readRDS(file = paste0(step2.1_results_directory, "/mapping_info.RDS"))
if(names(mapping_info)[1] == "mapping_info") mapping_info <- mapping_info[[1]]

gData <- readRDS(file = paste0(step2.1_results_directory, "/gData.RDS"))
if(names(gData)[1] == "gData") gData <- gData[[1]]

```

If you wish to randomize the features (they will be randomized independantly of one another), change "Randomize" to TRUE and run the following chunk:


```{r add randomization}
Randomize = ifelse(rstudioapi::showQuestion("Choose","Do you wish to add randomized phenotypes to the GWAS?","Yes","No"),TRUE,FALSE)

if (Randomize){
  randomizations = rstudioapi::showPrompt(title = "Number of Randomizations",message = "How many randomizations of each phenotype?",default = 2)
  choose_seed = rstudioapi::showPrompt(title = "Choose seed",message = "This value is used in set.seed",default = 10)
  set.seed(choose_seed)
  
  while (Randomize & randomizations>0){
    for (trial in names(gData$pheno)){
      temp_trial <- gData$pheno[[trial]]
      for (trait in names(gData$pheno[[trial]])[-1]){
        if(!grepl("_Rand",trait)){
          temp_trial <- eval(parse(text = paste0("transform(temp_trial, ",trait,"_Rand",randomizations," = sample(temp_trial[,'",trait,"']))")))
        }
      }
      gData$pheno[[trial]] <- temp_trial
    }
    randomizations = randomizations -1
  }
  print(colnames(gData$pheno[[1]]))
  
}
```




```{r run Single Trait Gwas}


#* See all the details regarding the "single trait GWAS" function by running 
#  ?runSingleTraitGwas

#* The important things are:
#* - @gData : the gData object to run 
#* - @traits : if not specified, all will be included
#* - @trials : if not specified, all will be included
#* - @covar : if any covariates were included in the gData, they can be added to the GWAS by specifiying either numeric indices or character names of columns in covar in gData.
#* - @thrType : this is the p-value correction, should get one of: "bonf", "fixed", "small", "fdr". Default is "bonf". The meaning of each is described in the function's documentation.
#* - @alpha : default is 0.05. If thrType is "bonf" than alpha is the LOD-threshold and if thrType is "fdr" than alpha is the significant p-Values
#* - @pThr : default is 0.05. Important if thrType is "fdr" - first the SNPs are restricted to the SNPs with a p-Value below pThr and only in the final step alpha is considered (explained in function description).
#* Other parameters also consider SNPs that are close to the the significant SNPs (as close to significant)

if(!require("statgenGWAS")){
  install.packages("statgenGWAS")
}
library(statgenGWAS)


results2 <- runSingleTraitGwas( 

  # traits = ,
  # trials = ,
  # covar = ,
  # thrType = ,
  # alpha = ,
  # pThr = ,
  # sizeInclRegion = ,
  gData = gData
  )



##Debug:
message("\n",Sys.time(), " - GWAS done")

#* Save the GWAS results. It will be saved in a subfolder of the gData folder to avoid confusion (if for example the features were randomized...)
#* 
GWAS_name = rstudioapi::showPrompt(title = "Name of GWAS folder",message = "Give a meaningful name to the GWAS folder",default = paste0("GWAS_",nrow(gData$markers),"_Strains_",results2$GWASInfo$thrType))

dir.create(paste0(step2.1_results_directory,"/",GWAS_name))

saveRDS(results2,file = paste0(step2.1_results_directory,"/",GWAS_name,"/GWAS.RDS"))
message("\nGWAS saved to: ",step2.1_results_directory,"/",GWAS_name,"\n")

# 
# Save_GWAS(GWAS = results2,
#           threshold_type = results2$GWASInfo$thrType,
#           nstrains = nrow(gData$markers),
#           dir_results = step2.1_results_directory)
```


If you wish to split the Data into testing and training:

```{r Separate training data and testing data}
#* Separate training data and testing data

 train_relative_size = rstudioapi::showPrompt(title = "Portions from data",message = "Choose the portion of the strains that will be used as training data",default = 0.7)
  choose_seed2 = rstudioapi::showPrompt(title = "Choose seed",message = "This value is used in set.seed for the separation of the training and the testing",default = 68)
  set.seed(choose_seed2)

gData_train_markers <- gData$markers[sample(rownames(gData$markers), round(train_relative_size*nrow(gData$markers))),]

gData_train_pheno <- list(
  U = gData$pheno$U[gData$pheno$U$genotype %in% rownames(gData_train_markers), ],
  Y = gData$pheno$Y[gData$pheno$Y$genotype %in% rownames(gData_train_markers), ]
                       )

gData_train_covar <- gData$covar[rownames(gData_train_markers),]

gData_train <- gData
gData_train$markers <- gData_train_markers
gData_train$pheno <- gData_train_pheno
gData_train$covar<-gData_train_covar

rownames(gData_train$pheno$U)<-NULL
rownames(gData_train$pheno$Y) <- (1:nrow(gData_train$pheno$Y))+nrow(gData_train$pheno$U)

gData_test_markers <- gData$markers[!(rownames(gData$markers) %in% rownames(gData_train_markers)),]

gData_test_pheno <- list(
  U = gData$pheno$U[gData$pheno$Y$genotype %in% rownames(gData_test_markers), ],
  Y = gData$pheno$Y[gData$pheno$Y$genotype %in% rownames(gData_test_markers), ]
                       )

gData_test_covar <- gData$covar[rownames(gData_test_markers),]

gData_test <- gData
gData_test$markers <- gData_test_markers
gData_test$pheno <- gData_test_pheno
gData_test$covar<-gData_test_covar

rownames(gData_test$pheno$U)<-NULL
rownames(gData_test$pheno$Y) <-  (1:nrow(gData_test$pheno$Y))+nrow(gData_test$pheno$U)

rm(gData_train_markers, gData_train_pheno, gData_train_covar, gData_test_markers, gData_test_pheno, gData_test_covar)
```


```{r run GWAS for multiple gData objects}

extra_gData_names = rstudioapi::showPrompt(title = "Name of more gData folder",message = "Give a meaningful name to the folder",default = paste0("gData_SeparationBy",train_relative_size,"_Seed_",choose_seed2))

dir.create(paste0(step2.1_results_directory,"/",extra_gData_names))

saveRDS(gData_test,file = paste0(step2.1_results_directory,"/",extra_gData_names,"/gData_test.RDS"))
saveRDS(gData_train,file = paste0(step2.1_results_directory,"/",extra_gData_names,"/gData_train.RDS"))



# message("\nGWAS saved to: ",step2.1_results_directory,"/",GWAS_name,"\n")
# 
# rstudioapi::showDialog("Folder Name Choosing","Choose the Name of the folder in which the multiple GWASs will be saved")
# 
#  step2.1_results_directory_extra = rstudioapi::selectDirectory(caption = "Place to save the multiple GWASs",path = step2.1_results_directory)
 
      
 
 list_of_gData_objects = list(Testing = gData_test, Training = gData_train)

  for(i in 1: length(list_of_gData_objects))
    {
    gD = list_of_gData_objects[[i]]
     results3 <- runSingleTraitGwas( 

  # traits = ,
   #trials = media,
   #covar = c(media,"GR"),
  # thrType = ,
  # alpha = ,
  # pThr = ,
  gData = gD
  )
     if (i==1){
       GWAS_name = rstudioapi::showPrompt(title = "Name of GWASs folder",message = "Give a meaningful name to the GWAS folder",default = paste0("GWAS_",nrow(gData$markers),"_Strains_",results3$GWASInfo$thrType))
     }
     
saveRDS(results3,file = paste0(step2.1_results_directory,"/",extra_gData_names,"/",GWAS_name,"/",names(list_of_gData_objects)[i],"_GWAS.RDS"))
# Save_GWAS(GWAS = results3,
#           threshold_type = results3$GWASInfo$thrType,
#           nstrains = nrow(gData2$markers),
#           dir_results = step2.1_results_directory,
#           results_name = "GWAS_parents_fdr_dup_not_removed")


}

 
```

Continue to step 2.3

