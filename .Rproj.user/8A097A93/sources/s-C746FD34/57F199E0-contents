---
title: "Using VCFtoGWAS package - Chapter 2 - Step 1"
author: "Tomer Antman"
date: "12/23/2021"
output: html_document
---
This markdown file assumes you already ran all the markdowns in chapter 1 and you now have a GWAS matrix with mapping info.

In this chapter, we will execute the GWAS (using [statgenGWAS package](https://cran.r-project.org/web/packages/statgenGWAS/vignettes/GWAS.html))

Please don't skip any code chunks.


**Background:**
The aim of Genome‐wide association studies (GWAS) is to identify single nucleotide polymorphisms (SNPs) of which the allele frequencies vary systematically as a function of phenotypic trait values. 

Identification of trait‐associated SNPs may subsequently reveal new insights into the biological mechanisms underlying these phenotypes.

# Step 0: Load prebuilt package ----


```{r load library}
if(!require("rstudioapi")) {install.packages("rstudioapi")}

if(!require("VCFtoGWAS")){
  if(!require("devtools")){install.packages("devtools")}
# load package:
  tryCatch({
    rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
  Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
  devtools::load_all(Path_of_project)},
           error = {
             devtools::install_github("TomerAntman/VCFtoGWAS")
             })
}

library("VCFtoGWAS")
```

## Load results of previous steps:

Set the results_directory where you saved the files from step 4 (or 5) from chapter 1:
[you need GWAS matrix and mapping info]
IMPORTANT: notice that in R, you must separate folders with forward slash (/) and not backslash(\)

```{r set the directory where final chapter 1 files are}

rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS matrix</b> is saved")

chapter1_results_directory = rstudioapi::selectDirectory(caption = "Folder of final Chapter 1 results")

#* check if you entered the directory correctly:
#* the file names of results from step 1.4 (and/or 1.5) should appear in the output
t(t(list.files(chapter1_results_directory)))
```

load the files from the results directory (not needed if they are loaded)

```{r load the files (for use or for view)}

rstudioapi::showDialog("File Choosing","Please choose the <b>mapping info</b>")

mapping_info <- readRDS(file = rstudioapi::selectFile(caption = "Select mapping info", path = chapter1_results_directory))
if(names(mapping_info)[1] == "mapping_info") mapping_info <- mapping_info[[1]]


rstudioapi::showDialog("File Choosing","Please choose the <b>GWAS matrix</b>")

GWAS_mat <- readRDS(file = rstudioapi::selectFile(caption = "Select GWAS matrix", path = chapter1_results_directory))
if( is.null(dim(GWAS_mat))) GWAS_mat <- GWAS_mat[[1]]

analyzing_parents_or_offspring = ifelse(rstudioapi::showQuestion("Choose","Analyzing Offspring or Parents?","Offspring","Parents"),"offspring","parents")

indicator <- ifelse(analyzing_parents_or_offspring == "offspring","offspring_", "")


```


# Step 1: Load phenotypes ----
The phenotypes need to be loaded into the functions as a dataframe of features in which:
  - First column - contains all strain names. Name: "genotype"
  - Second column - contains the trial parameter (example: "Glucose" or "Glycerol").
    [if you don't have any (only one condition), give the column a generic identical value for all rows]
  - Rest of the columns are the features and need to have a clear name.

## Load features dataframe ----

```{r Do I have a prepared dataframe of phenotype features}
#* You need to load an array of the names of strains that you wish to keep
#* If you have the dataframe ready on your computer than change `phenotype_dataframe_exists` to TRUE

phenotype_dataframe_exists = rstudioapi::showQuestion("Choose","Do you already have a phenotype dataframe saved?","Yes","No")

```

If you don't have a dataframe pre-prepared, you need to create it somehow, 
this code shows an example of how to do that for a specific csv (see below)

if exists:
```{r Load dataframe of phenotypes}
if (phenotype_dataframe_exists){
  ###### START YOUR CHANGES ######
  
  #* If you changed `phenotype_dataframe_exists` to TRUE, 
  #* you need to either load the dataframe here.
  #* copy the full csv file path that you wish to load, and then execute the following code line in the RStudio console: 
  # gsub('"',"",gsub("\\\\","/",readClipboard()))
  
  #* copy the printed result and paste instead of the placeholder: (needs to end with .csv)
  rstudioapi::showDialog("File Choosing","Please choose the csv <b>phenotypes</b> file")
  phenotypes <- read.csv(rstudioapi::selectFile(caption = "Select phenotypes csv", path = chapter1_results_directory), header = T)
  # phenotypes <- read.csv(file = paste0(chapter1_results_directory, "/phenotypes.csv"), header = T)
  
  
  
  ###### END YOUR CHANGES ######
  
  #* See what you uploaded:
  head(phenotypes)
  if (!("genotype" %in% colnames(phenotypes))){
    warning("The uploaded dataframe has no column 'genotype'.\nPlease follow the instrutions properly.")
  }
}
```

If needs to be extracted:
*** If you have a different method to extract it (and a different file, feel free to run a different code. just make sure to save the result dataframe as `phenotypes`)

```{r Create phenotypes dataframe}
if (!phenotype_dataframe_exists){
  #* This is how it is done via the `df_complete_removecols.csv` file from Sivan's data.
  #* In this example, fitness phenotypes can be created for both the parents and offspring (both appear in the csv). Which is chosen depends on what was the variable `analyzing_parents_or_offspring` chosen to be in the chunk `load the files (for use or for view)`
  
  #* Choose based on the uploaded GWAS matrix (the rownames matter)
  
  if(!require("dplyr")){install.packages("dplyr")}
  library(dplyr,quietly = TRUE, warn.conflicts = FALSE)
  
  # df_complete_removecols_route = "df_complete_removecols.csv"
  
  rstudioapi::showDialog("File Choosing","Please choose the csv file from which you wish to extract the phenotypes")
  mating_pref <- read.csv(rstudioapi::selectFile("*probably 'df_complete_removecols.csv'*"), header = T)
  
  if (analyzing_parents_or_offspring == "offspring"){
    
    temp <- mating_pref %>%
      select(par_concat, media, fit_dip) %>%
      #* take numbers out of strain names
      mutate(par_concat = gsub('[[:digit:]]+', '', par_concat)
      ) %>%
      
      #* filter to get only strains appearing in the relevant strains (see `Get strains from papers` chunk)
      filter(par_concat %in% rownames(GWAS_mat),
             media != 'UY',
             !is.na(fit_dip)
      ) %>%
      #* get unique rows (across all categories)
      distinct(.keep_all = TRUE)
      
    
    #* if a strain appears more than once in a certain media (like if there are A and alpha forms of it), we average them. Thus getting unique rows of "genotype" (strain), "media" (glycerol(Y) or glucose(U)) and "fit" (measured and calculated fitness)
    
    
     offspring <-aggregate(temp$fit_dip,
                          by=list(genotype=temp$par_concat, media = temp$media),
                          data=temp,
                          FUN=mean,
                          na.rm=TRUE,
                          na.action=NULL)
    colnames(offspring)[ncol(offspring)] <- "fit"

     
    #* add a binary fitness phenotype to the offspring:
    offspring$binfit <- as.integer(offspring$fit>0)
    offspring$binfit[offspring$fit==-10] <- -1
    offspring$fit[offspring$fit==-10] <- NA
    
    rownames(offspring)<-NULL
    
    # create clouds covariate
   
    
    # drop the clouds
    phenotypes <- offspring

    
    
  }else if(analyzing_parents_or_offspring == "parents"){
    
    temp <- mating_pref %>%
      select(strainA, strainalp, media, fit1_A, fit1_alp) %>%
      #* take numbers out of strain names
      
      mutate(strainA = gsub('[[:digit:]]+', '', strainA),
             strainalp = gsub('[[:digit:]]+', '', strainalp)
      ) %>%
      
      #* filter to get only strains appearing in the relevant strains (see `Get strains from papers` chunk)
      filter(strainA %in% rownames(GWAS_mat_sivan) | strainalp %in% rownames(GWAS_mat_sivan),
             media != 'UY',
             !is.na(fit1_A) | !is.na(fit1_alp)
      ) %>%
      #* get unique rows (across all categories)
      distinct(.keep_all = TRUE)
    
    
    parents <- data.frame(genotype =  c(temp$strainA, temp$strainalp),
                          media = c(temp$media,temp$media),
                          fit = c(temp$fit1_A, temp$fit1_alp))
    
    #* if a strain appears more than once in a certain media (like if there are A and alpha forms of it), average them. Thus getting unique rows of "genotype" (strain), "media" (glycerol(Y) or glucose(U)) and "fit" (measured and calculated fitness)
    parents <- aggregate(parents$fit,
                         by=list(genotype=parents$genotype,
                                 media = parents$media),
                         data=parents,
                         FUN=mean,
                         na.rm=TRUE, 
                         na.action=NULL)
    colnames(parents)[3] <- "fit"
    parents[is.nan(parents$fit),"fit"]<- NA
    parents$binfit <- 1
    parents$binfit[parents$fit<=0] <- 0
    parents$binfit[is.na(parents$fit)] <- -1
    phenotypes <- parents
  }
  
  head(phenotypes)
}
```

If you created a phenotype dataframe, now could be a good time to save it:

```{r Save phenotypes}
if (!phenotype_dataframe_exists){
#* the indicator was created in the "`load the files (for use or for view)`" chunk. It defines of the string "offspring_" is added to the name or not.

rstudioapi::showDialog("Saving file","phenotypes csv is about to be saved in 'chapter1_results_directory'")


write.csv(phenotypes, 
          paste0(chapter1_results_directory,"/",indicator,"phenotypes.csv"),
          row.names = FALSE)

t(t(list.files(chapter1_results_directory)))
}
```


By this point we have a fully functional phenotype dataframe and we can continue to the gData object creation.

# Step 2: Create the a gData object ----

A gData object will contain all data needed for performing analyses, so the first thing to do when using the statgenGWAS package is creating a gData object.

The gData object consists of a few components:

1. The Marker map (`map`) - is used to describe the physical positions of the markers on the chromosomes. The data consists of two columns, `chr` for the name or number of the chromosome and `pos` for the position of the marker on the chromosome.    
2. The Marker matrix (`marker`) - contains the names of the markers in column names and the genotypes in the row names. Markers can either be coded as character strings or as numerical values.   

3. Phenotypic data (`pheno`) - can either be a single data.frame or a list of data.frames for storing data for different trials or different summarizations of the original data. The first column of all elements of `pheno` should be genotype and all the other columns should represent different traits.    


```{r Set parameters for gData creation and saving}

###### START YOUR CHANGES ######

#* Avoid "over-burying" the files... There is a limit on file path length on windows. My advice is to use the parent folder of the results of chapter 1

rstudioapi::showDialog("Path Choosing","Choose the folder where all the results of chapter 2 will be saved")

dir_to_save = rstudioapi::selectDirectory(caption = "Results of chapter 2")
#or: dir_to_save = paste_directory()

#* what is the name of the column that sets the trials (different conditions)?

trial_column = "media"

#* what are the names of the columns of the features?

selected_features = c("fit","binfit")


#* Remember to change the results_name if you want them to be more indicative. For example mention whether the results are for the parents or offspring

#* The default folder name for saving will be "Step2.1-gData_creation" with a time stamp.
#* If the default is used and the the phenotypes are set to be randomized (through `Randomize = TRUE`), the word "Randomized" will be added to the time stamp.

results_name = rstudioapi::showPrompt(title = "Choose Name",message = "State the name that will be given to the folder in which the results will be saved (it will be created)",default = NA) # Something like: "offspring_dup_onlySNPs"

#* You may also add a covariate dataframe to the parameter `covariate`.
#* covariates may be PC's or some other data from the results such as frequency of a strain in a population. It has to be a dataframe with theta strain names ("genotypes") as row names.

###### END YOUR CHANGES ######
```

?statgenGWAS::createGData
```{r}
results1 <- create_gData(GWAS_mat =  GWAS_mat,
                         mapping_info = mapping_info, 
                         phenotype = phenotypes,
                         trial = trial_column,
                         # covariate = covar_cloud,
                         features = selected_features,
                         dir_results = dir_to_save,
                         results_name = results_name
                         )

gData <- results1$gData

if(length(results1)>1){
  saved_in_directory <- results1$directory
  rm(results1)
  print(saved_in_directory)
}

```


