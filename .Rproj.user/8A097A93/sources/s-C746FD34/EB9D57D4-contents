---
title: "Using VCFtoGWAS package - Chapter 2 - Step 3"
author: "Tomer Antman"
date: "12/31/2021"
output: html_document
---
The 3rd step of the process consists of conclusions and visualizations:

```{r load library}
if(!require("rstudioapi")) {install.packages("rstudioapi")}

if(!require("VCFtoGWAS")){
  if(!require("devtools")){install.packages("devtools")}
# load package:
  tryCatch({
    rstudioapi::showDialog("Path Choosing","Please choose the folder where the <b>VCFtoGWAS package</b> is saved (perhaps as a project)")
  Path_of_project = rstudioapi::selectDirectory(caption = "Path to project")
  devtools::load_all(Path_of_project)
  },
           error = {
             devtools::install_github("TomerAntman/VCFtoGWAS")
             })
}

library("VCFtoGWAS")
```

Enter the directory where the GWAS final results are saved

```{r set the directory of the GWAS object location}
#* remove uneccesary big files:
if (exists("results2")) rm(results2)

rstudioapi::showDialog("Path Choosing","Choose the folder where the <b>GWAS Result</b> is saved")

step2.2_results_directory = rstudioapi::selectDirectory(caption = "Folder of Step 2.2 results")


t(t(list.files(step2.2_results_directory)))
```


You will now choose the files that you're going to work with from the directory that you entered in the previous chunk.

First, Choose the **GWAS file**
Remember, this object contains the SNPs that were found to be significant and their effect sizes.
If you have training and testing, than the GWAS object should belong to the training

```{r state GWAS file name and load GWAS}
rstudioapi::showDialog("File Choosing","Choose the GWAS.RDS file that you wish to load")

GWAS_file_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "GWAS Result")
temp <- strsplit(GWAS_file_path,"/")[[1]]
temp <- temp[length(temp)]
GWAS_file_name <- strsplit(temp,"\\.")[[1]][1]
GWAS <- readRDS(GWAS_file_path)
if (names(GWAS)[1]=="GWAS") {GWAS <- GWAS[[1]]}
```

Begin with seeing how the pvalues of your data look:

```{r QQ}
if(!require("qqman")) install.packages("qqman")
if(!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if(!require("ggplotify")) install.packages("ggplotify")
library(ggplotify)

if (rstudioapi::showQuestion("About the plots","Are you running this on the WEXAC server?","Yes","No")){
  options(bitmapType = "cairo")
}

do_qq <- function(GWAS_trial, checked_trait){
  qq_plot <- as.ggplot(function()  qqman::qq(GWAS_trial$pValue[GWAS_trial$trait==checked_trait])) +
        labs(title = "Q-Q plot", subtitle = paste0("Trial: ", GWAS_trial_name,"; Trait: ",checked_trait))
  return(qq_plot)
}

for (GWAS_trial_name in names(GWAS$GWAResult)){
  GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
  for (checked_trait in unique(GWAS_trial$trait)){
    suppressWarnings({  
    qq_plot <- do_qq(GWAS_trial, checked_trait)
      print(qq_plot)})
  }
}
```


Now you know which trials and traits are relevant to work with.
State the trials you wanna keep seeing and state the features in them that you wish to see:

```{r State interesting trials+traits}
if(!require("hash")) install.packages("hash")
library(hash)

interesting_results <- hash()

##* The format is this:
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, Trait2Name, Trait3Name, ...)
#  interesting_results[[_Trial1Name_]] = c(Trait1Name, ...)

interesting_results[["U"]] = c("fit", "binfit")
interesting_results[["Y"]] = c("fit", "binfit")


```

Draw a Manhattan plot for everything you chose:

```{r Draw manhattan, fig.height=8, fig.width=10}
for (GWAS_trial_name in names(interesting_results)){
  for (checked_trait in interesting_results[[GWAS_trial_name]]){
    manhat_plot = plot_manhattan(GWAS, GWAS_trial_name , checked_trait)
    suppressWarnings(print(manhat_plot))
  }
}
```

Now the gData become relevant. You see the SNPs in the manhattan plots in the previous code chunk. 

Load the **gData** containing the strains on which you wish to examine the effect of the found SNPs.
If you have training and testing, than the gData should belong to the testing

```{r load gData}
rstudioapi::showDialog("File Choosing","Choose the gData file that you wish to load. { If you have training and testing, than the gData should belong to the testing }")
gData_path<- rstudioapi::selectFile(path = step2.2_results_directory, caption = "gData")
gData <- readRDS(gData_path)
if (names(gData)[1]=="gData") {gData <- gData[[1]]}
```

First of all, let's examine the each SNP on its own and how it effects the fitness. 

```{r Allele vs fitness, fig.height=8, fig.width=10}
for (GWAS_trial_name in names(interesting_results)){
  for (checked_trait in interesting_results[[GWAS_trial_name]]){
    alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
    suppressWarnings(print(alleleVSfitness))
  }
}

```


Next, we compute thecumulative polygenic effect score of all the significant SNPs on the fitness.
We may assume "Haploinsufficiency" for all the SNPs when calculating the score by choosing `haplo_sufficency = FALSE`
But if it is `TRUE` than "Haplo Sufficiency" is assumed and all the places of "1" (a/A) are changed to "0" (as if they are A/A) and all the places of "2" (a/a) are given a "1" instead.

***In haploinsufficiency a single copy of the wild-type allele (A) at a locus in heterozygous combination with a variant allele (a) is insufficient to produce the wild-type phenotype. Meaning a/A isn't as "good" as A/A.

Explanation:
Ss = Score of a strain
VA = variant (snp) appearance in that strain (0/1/2)
VE = Variant effect (according to the GWAS). can be positive or negative

Ss(i) = Î£ [VA(1)xVE(1) + VA(2)xVE(2) +...+ VA(n)xVE(n)
$$ 
 Ss_{i} = \sum_{i=1}^{n} VA_{i}\times VE_{i} \\
$$

```{r polygenic effect score}
for (GWAS_trial_name in names(interesting_results)){
  for (checked_trait in interesting_results[[GWAS_trial_name]]){
    pol_effect <- polygenic_effect_score(gData, GWAS, GWAS_trial_name, checked_trait, haplo_sufficency = TRUE)
    effect_details <- pol_effect$effect_scores
    effect_plot <- pol_effect$effect_plot
    print(effect_plot)
    print(head(effect_details))
  }
}
        
```


Lastly, if we desire to know more about the SNPs that were found, we can create a csv file containing the SNPs and the genes they fall in (in case they are in genes). The csv also includes the alteration of the amino acid sequence due to the mutation.


Now you load the **mapping info** that indicates how to read the snps (chromosomal location)

```{r load mapping info}
rstudioapi::showDialog("File Choosing","Choose the mapping_info.RDS file that you wish to load")
mapping_info_path <- rstudioapi::selectFile(path = step2.2_results_directory, caption = "mapping info")
mapping_info <- readRDS(mapping_info_path)
if (names(mapping_info)[1]=="mapping_info") {mapping_info <- mapping_info[[1]]}
```

You will need to choose the directory where you want to save the CSVs so be prepared

```{r Create CSV}
rstudioapi::showDialog("Directory Choosing","Choose the where you wish to save the CSV files")

dir_to_save = rstudioapi::selectDirectory(path = step2.2_results_directory, caption = "Save CSV")

for (GWAS_trial_name in names(interesting_results)){
  for (checked_trait in interesting_results[[GWAS_trial_name]]){
    
    name <- paste0("SNPs-",GWAS_file_name,
                     "_Trial-",GWAS_trial_name,
                     "_Trait-",checked_trait)
    
    GWAS_trial_snps <- GWAS$signSnp[[GWAS_trial_name]]
    
    snp_full_data <- Create_complete_snp_data(GWAS_trial_snps,
                                              checked_trait,
                                              mapping_info,
                                              genes_df = SacCer_sgd_cds)
    write.csv(snp_full_data, file = paste0(dir_to_save,"/",name,".csv"), row.names = FALSE)
  }
}

```


And lastly, put everything together in a PDF:
```{r all in PDF}
if(!require("gridExtra")) install.packages("gridExtra")
  library(gridExtra, include.only = 'grid.arrange')

if(!exists("dir_to_save")) {
  rstudioapi::showDialog("Directory Choosing","Choose the where you wish to save the PDF")
  dir_to_save = rstudioapi::selectDirectory(path = step2.2_results_directory, caption = "Save PDF")

}

pdf(file=paste0(dir_to_save,"/",GWAS_file_name,"-Plots.pdf"), onefile = TRUE,
      width = 14, height = 10)

for (GWAS_trial_name in names(interesting_results)){
  GWAS_trial <- eval(parse(text = paste0("GWAS$GWAResult$`",GWAS_trial_name,"`")))
  for (checked_trait in interesting_results[[GWAS_trial_name]]){
    Headline_plot <- ggplot() +
      annotate("text", x = 1, y = 1, size = 10,
               label = plot_names) +
      theme_void()
    
    
    suppressWarnings({qq_plot <- do_qq(GWAS_trial, checked_trait)})
    
    manhat_plot <- plot_manhattan(GWAS, GWAS_trial_name ,checked_trait)
    
    alleleVSfitness <- allele_presence_plot(gData, GWAS, GWAS_trial_name, checked_trait)
    
    pol_effect <- polygenic_effect_score(gData, GWAS, GWAS_trial_name, checked_trait, haplo_sufficency = TRUE)
    
    plots <- list(Headline_plot = Headline_plot,
                  qq_plot = qq_plot, 
                  manhattan_plot = manhat_plot,
                  alleleVSfitness = alleleVSfitness,
                  poly_effect = pol_effect$effect_plot)
    
    for ( i in 1:length(plots)){
      message("\nplotting: ",names(plots)[i])
      grid.arrange(grobs = plots[i], top="", newpage = T)
    }
  }
}

dev.off()


```


